// Trustmeup ScriptTag v.1.0// This script holds communication between Shopify frontend and Trustmeup// Checking referral code is setlet observing = false;const queryString = window.location.search;const urlParams = new URLSearchParams(queryString);const otp = urlParams.get("otp");if (otp) {    // Saving OTP code to cookies, and remove it from url with redirect    document.cookie = "otp=" + otp;    urlParams.delete("otp");    const redirectUrl = window.location.origin + window.location.pathname + "?" + urlParams.toString();console.log("this is only fortesting");    window.location = redirectUrl;}// Basic cookie reading functionconst getCookie = (cname) => {    let name = cname + "=";    let decodedCookie = decodeURIComponent(document.cookie);    let ca = decodedCookie.split(';');    for(let i = 0; i <ca.length; i++) {        let c = ca[i];        while (c.charAt(0) == ' ') {            c = c.substring(1);        }        if (c.indexOf(name) == 0) {            return c.substring(name.length, c.length);        }    }    return "";}// Set OTP globally for further useconst OTP = getCookie("otp");const checkoutButton = document.getElementsByName("checkout")[0];// CSS loading spinnerconst spinnerCss = ".loader { border: 16px solid #f3f3f3; border-top: 16px solid #3498db;border-radius: 50%;width: 30px;height: 30px;animation: spin 2s linear infinite;}";const spinnerCss2 = "@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .tinline { display: inline-block; }";// Notice cssconst noticeCss = '<style>\n' +    '    div.trustmeup-incentive-notice { background: #fff; border: 1px solid #CACACA; color: #111; padding: 1rem; margin-bottom: 1rem; font-size: .8rem; }\n' +    '    div.trustmeup-incentive-notice strong { display:block; color: #149DBD; font-size: 1.2rem; }\n' +    '    div.trustmeup-incentive-notice a { font-weight:bold; color: #149DBD; }\n' +    '    div.trustmeup-incentive-notice p { margin: 0; font-size: 1rem; }\n' +    '    div.trustmeup-incentive-notice img.trustmeup-icon { width: 2.4rem; height:1.8rem; margin-bottom: 0; }\n' +    '</style>';// Spinner HTMLconst addSpinner = () => {    let html = "<div class='tinline' id='trustSpinner'>";    html += "<style>";    html += spinnerCss;    html += spinnerCss2;    html += "</style>";    html += "<p class='tinline'>Connecting to Trustmeup..&nbsp;&nbsp;</p><div class='loader tinline'></div>";    html += "</div>";    return html;}// Format currencyconst formatMoney = (amount) => {    return Intl.NumberFormat(Shopify.locale, {        style: 'currency',        currency: Shopify.currency.active    }).format(amount);}// Get Shopify cartconst getCart = async () => {    const result = await fetch("/cart.json");    if (result.status === 200) {        return result.json();    }    throw new Error(`Failed to get request, Shopify returned ${result.status} ${result.statusText}`);}// Checkout button submissionconst checkoutSubmit = async () => {    checkoutButton.setAttribute("type", "submit");    checkoutButton.removeEventListener("click", Trustmeup);    checkoutButton.click();}// The main dealconst Trustmeup = async () => {    checkoutButton.style.visibility = "hidden";    checkoutButton.insertAdjacentHTML("afterend", addSpinner());    // Get Shopify cart    const cart = await getCart();    var items = [];    cart.items.forEach(element => {        items.push( {            id: element.product_id,            quantity: element.quantity,            price: element.price        })    });    // App proxy    let response = await fetch("/apps/trustmeup/?items=" + JSON.stringify(items) + "&token=" + cart.token + "&otp=" + OTP);    let data = await response.json();    // One banana, two banana,...    if (data.pac_discount < data.max_pac_amount) {        // Add donate more notice        let additionalDiscount = data.max_pac_amount-data.pac_discount;        let afterCartItemsDiv = document.querySelector(".cart__footer");        let donateHtml = '<div id="notice_message"><br>';        donateHtml += noticeCss;        donateHtml += '<div class="trustmeup-incentive-notice">\n' +            '\t\t\t\t<div style="text-align: left"><img class="trustmeup-icon" src="https://server1.lt/trustmeup2/wp-content/plugins/trustmeup//assets/images/trustmeup-icon.png"></div>\n' +            '\t\t\t\t<p style="text-align: left"><strong>Message from TrustMeUp: Donate by buying!</strong>\n' +            '\t\t The shop offers you the possibility to donate <span><bdi>' + formatMoney(additionalDiscount) + '</bdi></span> for free to a cause dear to you, immediately discounting it from your purchase <a href="https://www.trustmeup.com/campaigns/" target="_blank">Donate now</a>.\n' +            '\t\tAfter donating, refresh the page <a onclick="Trustmeup()">by clicking here</a>.</p>\n' +            '\t\t\t</div></div>';        let newDiv = document.createElement('div');        newDiv.innerHTML = donateHtml;        // Check if notice message already exists        let noticeMessageDiv = document.querySelector("#notice_message");        if (noticeMessageDiv) {            noticeMessageDiv.innerHTML = donateHtml;        } else {            afterCartItemsDiv.before(newDiv);        }    }    // Add Trustmeup HTML elements    let subtotalDiv = document.querySelector(".cart-subtotal");    let trustHtml = '<div id="trustmeup__totals"><br><br>';    trustHtml += '<span class="cart-subtotal__title">PAC discount available</span>';    trustHtml += '<span class="cart-subtotal__price" data-cart-subtotal="">' + formatMoney(data.max_pac_amount) + ' ' + Shopify.currency.active + '</span>';    trustHtml += '<br>';    trustHtml += '<span class="cart-subtotal__title">Your PACs available</span>';    trustHtml += '<span class="cart-subtotal__price" data-cart-subtotal="">' + formatMoney(data.available_pac) + ' ' + Shopify.currency.active + '</span>';    trustHtml += '<br>';    trustHtml += '<span class="cart-subtotal__title">PAC discount</span>';    trustHtml += '<span class="cart-subtotal__price" data-cart-subtotal="">- ' + formatMoney(data.pac_discount) + ' ' + Shopify.currency.active + '</span>';    trustHtml += '<br>';    trustHtml += '<span class="cart-subtotal__title">Total</span>';    trustHtml += '<span class="cart-subtotal__price" data-cart-subtotal="">' + formatMoney((cart.total_price/100)-data.pac_discount) + ' ' + Shopify.currency.active + '</span>';    trustHtml += '<br><br></div>';    // Check if div already exists    trustmeupDiv = document.querySelector("#trustmeup__totals");    if (trustmeupDiv) {        trustmeupDiv.innerHTML = trustHtml;    } else {        subtotalDiv.innerHTML += trustHtml;    }    // Remove spinner, show checkout button    document.getElementById("trustSpinner").remove();    checkoutButton.style.visibility = "visible";    // Allow to submit checkout form    checkoutButton.setAttribute("type", "submit");    checkoutButton.removeEventListener("click", Trustmeup);    // Add additional parameters    if (data.discount) {        // Code has been created on backend, changing this value manually - nothing gonna happen        let code = data.discount_code;        const checkoutForm = checkoutButton.closest("form");        let action = checkoutForm.getAttribute("action");        // In case discount was already generated, but customer donated more and page was refreshed. We remove old discount code        let cartUrl = action.split("?");        let newUrl = cartUrl[0] + "?discount=" + code;        checkoutForm.setAttribute("action", newUrl);    }    // No discounted items has been found    if (!data.trustmeup) { checkoutSubmit(); }    listenForUpdates();    observing = false;}// Item update listenerconst listenForUpdates = () => {    const updatesListener = document.getElementsByName("updates[]")[0];    if (updatesListener) {        // Select the node that will be observed for mutations        //const targetNode = document.querySelector(".cart-subtotal__price");        const targetNode = updatesListener;        // Options for the observer (which mutations to observe)        const config = {attributes: true, childList: true, subtree: true, characterDataOldValue: true};        // Callback function to execute when mutations are observed        const callback = function (mutationsList, observer) {            if (!observing) {                observing = true;                setTimeout(function () {                    Trustmeup();                }, 400);            }        };        // Create an observer instance linked to the callback function        const observer = new MutationObserver(callback);        // Start observing the target node for configured mutations        observer.observe(targetNode, config);    }}const recalculate = () => {    setTimeout(function () {        Trustmeup();    }, 400);}// Item delete listenerconst listenForDeletes = () => {    var deleteListeners = document.querySelectorAll("a[data-cart-remove]");    deleteListeners.forEach(function (element) {        element.addEventListener("click", recalculate);    });}const listenForCheckout = async () => {    // Check if checkout button exist on current page add listener to it    if (checkoutButton) {        checkoutButton.setAttribute("type", "button");        checkoutButton.addEventListener("click", Trustmeup);        listenForUpdates();        listenForDeletes();    }}// Enable Trustmeup if OTP is setOTP ? listenForCheckout() : false